#include "sox_class_generator.h"

#include <atomic>

#include "text_writer.h"
#include "lib/common/stacktrace_exception.h"
#include "lib/game_base/data/sox/sox_file.h"

namespace cebreiro
{
	static std::atomic<int64_t> index = 1;

	void WriteDoNotEdit(TextWriter& writer)
	{
		writer.WriteLine("/**********************************************************");
		writer.WriteLine("         AUTO GENERATED FILE BY sox_code_generator");
		writer.WriteLine("                   DO NOT EDIT THIS FILE");
		writer.WriteLine("**********************************************************/");
	}

	SoxClassGenerator::SoxClassGenerator(const gamebase::SoxFile& soxFile)
		: _soxFile(soxFile)
		, _fileNotation(ParseFileName(_soxFile.name))
		, _columnNotation(ParseColumnName(_soxFile.columnNames.at(1).name))
		, _className(ToPascal(_fileNotation, _soxFile.name))
		, _containerName(std::format("{}Table", _className))
		, _index(index.fetch_add(1))
	{
	}

	SoxClassGenerator::~SoxClassGenerator()
	{
	}

	auto SoxClassGenerator::GenerateHeader() const -> std::string
	{
		TextWriter writer;
		WriteDoNotEdit(writer);
		writer.WriteLine("#pragma once");
		writer.WriteLine("#include <cstdint>");
		writer.WriteLine("#include <string>");
		writer.WriteLine("#include <vector>");
		writer.WriteLine("#include <unordered_map>");
		writer.WriteLine("#include <filesystem>");
		writer.WriteLine("#include \"lib/game_data/game_data_table.h\"");
		writer.BreakLine();

		writer.WriteLine("namespace cebreiro { class StreamReader; }");
		writer.BreakLine();

		writer.WriteLine("namespace cebreiro::gamedata");
		writer.WriteLine("{");

		writer.WriteLine("\tstruct {}", _className);
		writer.WriteLine("\t{");
		writer.WriteLine("\t\t{}() = default;", _className);
		writer.WriteLine("\t\texplicit {}(StreamReader& reader);", _className);
		writer.BreakLine();

		for (const gamebase::SoxColumn& column : _soxFile.columnNames)
		{
			if (column.type == gamebase::SoxDataType::String)
			{
				writer.WriteLine("\t\t{} {};", ToString(column.type), GetMemberName(column));
			}
			else if (column.type == gamebase::SoxDataType::Float)
			{
				writer.WriteLine("\t\t{} {} = 0.f;", ToString(column.type), GetMemberName(column));
			}
			else
			{
				writer.WriteLine("\t\t{} {} = 0;", ToString(column.type), GetMemberName(column));
			}
		}

		writer.WriteLine("\t};");
		writer.BreakLine();

		writer.WriteLine("\tclass {0} : public GameDataTable", _containerName);
		writer.WriteLine("\t{");
		writer.WriteLine("\tpublic:");
		writer.WriteLine("\t\t static constexpr int64_t INDEX = {};", _index);
		writer.BreakLine();
		writer.WriteLine("\tpublic:");
		writer.WriteLine("\t\tvoid LoadFromFile(const std::filesystem::path& path);");
		writer.BreakLine();
		writer.WriteLine("\t\tauto Find(int32_t index) const -> const {}*;", _className);
		writer.WriteLine("\t\tauto Get() const -> const std::vector<{}>&;", _className);
		writer.BreakLine();
		writer.WriteLine("\tprivate:");
		writer.WriteLine("\t\tstd::vector<{}> _vector;", _className);
		writer.WriteLine("\t\tstd::unordered_map<int32_t, const {}*> _umap;", _className);
		writer.WriteLine("\t};");
		writer.WriteLine("}");

		return writer.Get();
	}

	auto SoxClassGenerator::GenerateCXX() const -> std::string
	{
		TextWriter writer;
		WriteDoNotEdit(writer);
		writer.WriteLine("#include \"{}.h\"", GetClassFileName());
		writer.BreakLine();
		writer.WriteLine("#include \"lib/common/stream/stream_reader.h\"");
		writer.WriteLine("#include \"lib/game_base/data/sox/sox_file.h\"");
		writer.WriteLine("#include \"lib/game_data/game_data_registry.h\"");
		writer.BreakLine();
		writer.WriteLine("namespace cebreiro::gamedata");
		writer.WriteLine("{");
		writer.WriteLine("\t[[maybe_unused]]");
		writer.WriteLine("\tstatic GameDataRegistry<{0}> registry;", _containerName);
		writer.BreakLine();
		writer.WriteLine("\t{0}::{0}(StreamReader& reader)", _className);
		writer.WriteLine("\t{");

		for (const gamebase::SoxColumn& column : _soxFile.columnNames)
		{
			writer.WriteLine("\t\t{} = {};", GetMemberName(column), [](const gamebase::SoxColumn& column)
				{
					switch (column.type)
					{
					case gamebase::SoxDataType::String:
						return "reader.ReadString(reader.ReadUInt16())";
					case gamebase::SoxDataType::Int:
						return "reader.ReadInt32()";
					case gamebase::SoxDataType::Float:
						return "reader.ReadFloat32()";
					default:
						throw StacktraceException(std::format("unknown sox bytes type: {}, column: {}", ToString(column.type), column.name));
					}
				}(column));
		}

		writer.WriteLine("\t}");
		writer.BreakLine();
		writer.WriteLine("\tvoid {}::LoadFromFile(const std::filesystem::path& path)", _containerName);
		writer.WriteLine("\t{");
		writer.WriteLine("\t\tgamebase::SoxFile fileData(path / \"{}.sox\");", _soxFile.name);
		writer.WriteLine("\t\tStreamReader reader(fileData.gameData.data(), fileData.gameData.size());");
		writer.BreakLine();
		writer.WriteLine("\t\t_vector.reserve(fileData.rowCount);");
		writer.WriteLine("\t\tfor (int32_t i = 0; i < fileData.rowCount; ++i)");
		writer.WriteLine("\t\t{");
		writer.WriteLine("\t\t\t_vector.emplace_back(reader);");
		writer.WriteLine("\t\t}");
		writer.BreakLine();
		writer.WriteLine("\t\tfor (const {}& data : _vector)", _className);
		writer.WriteLine("\t\t{");
		writer.WriteLine("\t\t\t_umap[data.index] = &data;");
		writer.WriteLine("\t\t}");
		writer.WriteLine("\t}");
		writer.BreakLine();
		writer.WriteLine("\tauto {}::Find(int32_t index) const -> const {}*", _containerName, _className);
		writer.WriteLine("\t{");
		writer.WriteLine("\t\tauto iter = _umap.find(index);");
		writer.WriteLine("\t\treturn iter != _umap.end() ? iter->second : nullptr;");
		writer.WriteLine("\t}");
		writer.BreakLine();
		writer.WriteLine("\tauto {}::Get() const -> const std::vector<{}>&", _containerName, _className);
		writer.WriteLine("\t{");
		writer.WriteLine("\t\treturn _vector;");
		writer.WriteLine("\t}");
		writer.WriteLine("}");

		return writer.Get();
	}

	auto SoxClassGenerator::GetClassFileName() const -> std::string
	{
		return ToFileNameConvention(_fileNotation, _soxFile.name);
	}

	auto SoxClassGenerator::GetMemberName(const gamebase::SoxColumn& column) const -> std::string
	{
		return ToMemberConvention(_columnNotation, column.name);
	}
}
