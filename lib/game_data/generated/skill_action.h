/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#pragma once
#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem>
#include "lib/game_data/game_data_table.h"

namespace cebreiro { class StreamReader; }

namespace cebreiro::gamedata
{
	struct SkillAction
	{
		SkillAction() = default;
		explicit SkillAction(StreamReader& reader);

		int32_t index = 0;
		int32_t type = 0;
		int32_t reserved1 = 0;
		int32_t reserved2 = 0;
		int32_t reserved3 = 0;
		int32_t charge1FxGid = 0;
		int32_t charge1FxPid = 0;
		int32_t charge2FxGid = 0;
		int32_t charge2FxPid = 0;
		int32_t shockFxGid = 0;
		int32_t shockFxPid = 0;
		int32_t _1handswordCharge1Pid = 0;
		int32_t _2handswordCharge1Pid = 0;
		int32_t heavyswordCharge1Pid = 0;
		int32_t hammerCharge1Pid = 0;
		int32_t axeCharge1Pid = 0;
		int32_t spearCharge1Pid = 0;
		int32_t polearmCharge1Pid = 0;
		int32_t knuckleCharge1Pid = 0;
		int32_t dartCharge1Pid = 0;
		int32_t gunCharge1Pid = 0;
		int32_t doublegunCharge1Pid = 0;
		int32_t shotgunCharge1Pid = 0;
		int32_t machinegunCharge1Pid = 0;
		int32_t bowCharge1Pid = 0;
		int32_t crossbowCharge1Pid = 0;
		int32_t daggerCharge1Pid = 0;
		int32_t rodCharge1Pid = 0;
		int32_t _1handswordCharge2Pid = 0;
		int32_t _2handswordCharge2Pid = 0;
		int32_t heavyswordCharge2Pid = 0;
		int32_t hammerCharge2Pid = 0;
		int32_t axeCharge2Pid = 0;
		int32_t spearCharge2Pid = 0;
		int32_t polearmCharge2Pid = 0;
		int32_t knuckleCharge2Pid = 0;
		int32_t dartCharge2Pid = 0;
		int32_t gunCharge2Pid = 0;
		int32_t doublegunCharge2Pid = 0;
		int32_t shotgunCharge2Pid = 0;
		int32_t machinegunCharge2Pid = 0;
		int32_t bowCharge2Pid = 0;
		int32_t crossbowCharge2Pid = 0;
		int32_t daggerCharge2Pid = 0;
		int32_t rodCharge2Pid = 0;
		int32_t _1handswordPid = 0;
		int32_t _2handswordPid = 0;
		int32_t heavyswordPid = 0;
		int32_t hammerPid = 0;
		int32_t axePid = 0;
		int32_t spearPid = 0;
		int32_t polearmPid = 0;
		int32_t knucklePid = 0;
		int32_t dartPid = 0;
		int32_t gunPid = 0;
		int32_t doublegunPid = 0;
		int32_t shotgunPid = 0;
		int32_t machinegunPid = 0;
		int32_t bowPid = 0;
		int32_t crossbowPid = 0;
		int32_t daggerPid = 0;
		int32_t rodPid = 0;
		int32_t _1handswordAttackedTiming = 0;
		int32_t _2handswordAttackedTiming = 0;
		int32_t heavyswordAttackedTiming = 0;
		int32_t hammerAttackedTiming = 0;
		int32_t axeAttackedTiming = 0;
		int32_t spearAttackedTiming = 0;
		int32_t polearmAttackedTiming = 0;
		int32_t knuckleAttackedTiming = 0;
		int32_t dartAttackedTiming = 0;
		int32_t gunAttackedTiming = 0;
		int32_t doublegunAttackedTiming = 0;
		int32_t shotgunAttackedTiming = 0;
		int32_t machinegunAttackedTiming = 0;
		int32_t bowAttackedTiming = 0;
		int32_t crossbowAttackedTiming = 0;
		int32_t daggerAttackedTiming = 0;
		int32_t rodAttackedTiming = 0;
		int32_t _1handswordTiming = 0;
		int32_t _2handswordTiming = 0;
		int32_t heavyswordTiming = 0;
		int32_t hammerTiming = 0;
		int32_t axeTiming = 0;
		int32_t spearTiming = 0;
		int32_t polearmTiming = 0;
		int32_t knuckleTiming = 0;
		int32_t dartTiming = 0;
		int32_t gunTiming = 0;
		int32_t doublegunTiming = 0;
		int32_t shotgunTiming = 0;
		int32_t machinegunTiming = 0;
		int32_t bowTiming = 0;
		int32_t crossbowTiming = 0;
		int32_t daggerTiming = 0;
		int32_t rodTiming = 0;
		int32_t _1handswordFulltime = 0;
		int32_t _2handswordFulltime = 0;
		int32_t heavyswordFulltime = 0;
		int32_t hammerFulltime = 0;
		int32_t axeFulltime = 0;
		int32_t spearFulltime = 0;
		int32_t polearmFulltime = 0;
		int32_t knuckleFulltime = 0;
		int32_t dartFulltime = 0;
		int32_t gunFulltime = 0;
		int32_t doublegunFulltime = 0;
		int32_t shotgunFulltime = 0;
		int32_t machinegunFulltime = 0;
		int32_t bowFulltime = 0;
		int32_t crossbowFulltime = 0;
		int32_t daggerFulltime = 0;
		int32_t rodFulltime = 0;
		std::string xxx;
	};

	class SkillActionTable : public GameDataTable
	{
	public:
		 static constexpr int64_t INDEX = 73;

	public:
		void LoadFromFile(const std::filesystem::path& path);

		auto Find(int32_t index) const -> const SkillAction*;
		auto Get() const -> const std::vector<SkillAction>&;

	private:
		std::vector<SkillAction> _vector;
		std::unordered_map<int32_t, const SkillAction*> _umap;
	};
}
