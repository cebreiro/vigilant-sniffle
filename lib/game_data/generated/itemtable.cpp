/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "itemtable.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<ItemtableTable> registry;

	Itemtable::Itemtable(StreamReader& reader)
	{
		index = reader.ReadInt32();
		name = reader.ReadString(reader.ReadUInt16());
		generate = reader.ReadInt32();
		category = reader.ReadInt32();
		type = reader.ReadInt32();
		job = reader.ReadInt32();
		explanation = reader.ReadString(reader.ReadUInt16());
		detailCate1 = reader.ReadInt32();
		detailCate2 = reader.ReadInt32();
		modifiable = reader.ReadInt32();
		invenWidth = reader.ReadInt32();
		invenHeight = reader.ReadInt32();
		modelid = reader.ReadInt32();
		quickslot = reader.ReadInt32();
		materialAmbient = reader.ReadInt32();
		materialDiffuse = reader.ReadInt32();
		limitArticle1 = reader.ReadInt32();
		limitArticle2 = reader.ReadInt32();
		limitArticle3 = reader.ReadInt32();
		limitArticle4 = reader.ReadInt32();
		limitValue1 = reader.ReadInt32();
		limitValue2 = reader.ReadInt32();
		limitValue3 = reader.ReadInt32();
		limitValue4 = reader.ReadInt32();
		distanceDefense = reader.ReadInt32();
		accuracyEvasion = reader.ReadInt32();
		durabilityMaxcount = reader.ReadInt32();
		maxInvenCount = reader.ReadInt32();
		minimumdamage = reader.ReadInt32();
		maximumdamage = reader.ReadInt32();
		twohand = reader.ReadInt32();
		limitTime = reader.ReadInt32();
		effect1 = reader.ReadInt32();
		effect2 = reader.ReadInt32();
		effect3 = reader.ReadInt32();
		effect4 = reader.ReadInt32();
		effectvalue1 = reader.ReadFloat32();
		effectvalue2 = reader.ReadFloat32();
		effectvalue3 = reader.ReadFloat32();
		effectvalue4 = reader.ReadFloat32();
		weaponSound = reader.ReadInt32();
		weaponFXH = reader.ReadInt32();
		weaponFXM = reader.ReadInt32();
		weaponFXL = reader.ReadInt32();
		effectID1 = reader.ReadInt32();
		effectID2 = reader.ReadInt32();
		effectID3 = reader.ReadInt32();
		effectID4 = reader.ReadInt32();
		rarity = reader.ReadInt32();
		sound1 = reader.ReadInt32();
		petEP = reader.ReadInt32();
		petNP = reader.ReadInt32();
		petEXP = reader.ReadInt32();
	}

	void ItemtableTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "ITEMTABLE.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const Itemtable& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto ItemtableTable::Find(int32_t index) const -> const Itemtable*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto ItemtableTable::Get() const -> const std::vector<Itemtable>&
	{
		return _vector;
	}
}
