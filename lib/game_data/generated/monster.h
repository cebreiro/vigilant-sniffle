/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#pragma once
#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem>
#include "lib/game_data/game_data_table.h"

namespace cebreiro { class StreamReader; }

namespace cebreiro::gamedata
{
	struct Monster
	{
		Monster() = default;
		explicit Monster(StreamReader& reader);

		int32_t index = 0;
		std::string monstername;
		int32_t modelid = 0;
		int32_t race = 0;
		int32_t exp = 0;
		int32_t level = 0;
		int32_t str = 0;
		int32_t dex = 0;
		int32_t con = 0;
		int32_t _int = 0;
		int32_t wil = 0;
		int32_t reserved1 = 0;
		int32_t reserved2 = 0;
		int32_t reserved3 = 0;
		int32_t lifetime = 0;
		float damageMotionMinHp = 0.f;
		int32_t resist = 0;
		int32_t abilityDamageB = 0;
		int32_t abilityDamageC = 0;
		int32_t abilityDamageD = 0;
		float randomAttackFactor = 0.f;
		int32_t death1delay = 0;
		int32_t maxrarity = 0;
		int32_t itemgenTimes = 0;
		int32_t tresure1 = 0;
		int32_t tresure2 = 0;
		int32_t tresure3 = 0;
		int32_t tresure4 = 0;
		int32_t tresure5 = 0;
		int32_t tresure6 = 0;
		int32_t tresure7 = 0;
		int32_t tresure8 = 0;
		int32_t moneyRarityMod = 0;
		int32_t moneyMinRarity = 0;
		float moneyFactor = 0.f;
		int32_t aiType = 0;
		int32_t followship = 0;
		int32_t generateType = 0;
		int32_t rageIncRate = 0;
		int32_t rageDecRate = 0;
		float rageAttackFactor = 0.f;
		int32_t ragespeed = 0;
		int32_t basicspeed = 0;
		int32_t sight = 0;
		int32_t chase = 0;
		int32_t canGoOut = 0;
		int32_t domain = 0;
		int32_t monsterarea = 0;
		int32_t characteristic = 0;
		int32_t activationStartTime = 0;
		int32_t activationEndTime = 0;
		int32_t childId = 0;
		int32_t childSummonDelay = 0;
		int32_t childNum = 0;
		int32_t childSummonFrame = 0;
		int32_t searchtime = 0;
		int32_t move1 = 0;
		int32_t move1range1 = 0;
		int32_t move1range2 = 0;
		int32_t move1delay1 = 0;
		int32_t move1delay2 = 0;
	};

	class MonsterTable : public GameDataTable
	{
	public:
		 static constexpr int64_t INDEX = 52;

	public:
		void LoadFromFile(const std::filesystem::path& path);

		auto Find(int32_t index) const -> const Monster*;
		auto Get() const -> const std::vector<Monster>&;

	private:
		std::vector<Monster> _vector;
		std::unordered_map<int32_t, const Monster*> _umap;
	};
}
