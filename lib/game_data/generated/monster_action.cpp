/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "monster_action.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<MonsterActionTable> registry;

	MonsterAction::MonsterAction(StreamReader& reader)
	{
		index = reader.ReadInt32();
		modelID = reader.ReadInt32();
		bodySize = reader.ReadInt32();
		genFxType = reader.ReadInt32();
		sightRange = reader.ReadInt32();
		chaseRange = reader.ReadInt32();
		canGoOut = reader.ReadInt32();
		domain = reader.ReadInt32();
		characteristic = reader.ReadInt32();
		levelDiffMax = reader.ReadInt32();
		maxEnemy = reader.ReadInt32();
		scanTime = reader.ReadInt32();
		cancelTime = reader.ReadInt32();
		moveRangeMin = reader.ReadInt32();
		moveRangeMax = reader.ReadInt32();
		moveDelayMin = reader.ReadInt32();
		moveDelayMax = reader.ReadInt32();
		moveDelayChase = reader.ReadInt32();
		followship1 = reader.ReadInt32();
		followship2 = reader.ReadInt32();
		followship3 = reader.ReadInt32();
		followship4 = reader.ReadInt32();
		guardID = reader.ReadInt32();
		childID = reader.ReadInt32();
		childSummonDelay = reader.ReadInt32();
		childCount = reader.ReadInt32();
		childSummonFrame = reader.ReadInt32();
		hostileLenFactor = reader.ReadInt32();
		hostileHpFactor = reader.ReadInt32();
		hostileDefFactor = reader.ReadInt32();
		hostileOtherAtt = reader.ReadFloat32();
		chaseScore = reader.ReadInt32();
		memoryTime = reader.ReadInt32();
		aerialHeight = reader.ReadInt32();
		deadSound = reader.ReadInt32();
		moveSound = reader.ReadInt32();
	}

	void MonsterActionTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "MONSTER_ACTION.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const MonsterAction& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto MonsterActionTable::Find(int32_t index) const -> const MonsterAction*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto MonsterActionTable::Get() const -> const std::vector<MonsterAction>&
	{
		return _vector;
	}
}
