/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#pragma once
#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem>
#include "lib/game_data/game_data_table.h"

namespace cebreiro { class StreamReader; }

namespace cebreiro::gamedata
{
	struct ItemBaseAttack
	{
		ItemBaseAttack() = default;
		explicit ItemBaseAttack(StreamReader& reader);

		int32_t index = 0;
		int32_t motionCategory = 0;
		int32_t dexBased = 0;
		int32_t minimumDamage = 0;
		int32_t maximumDamage = 0;
		int32_t attackDelay = 0;
		int32_t divDamage = 0;
		int32_t divDamageDelay = 0;
		int32_t combo = 0;
		int32_t attackRange = 0;
		int32_t hitMaterial = 0;
		int32_t hitFX1 = 0;
		int32_t hitFX2 = 0;
		int32_t hitFX3 = 0;
		int32_t hitFX4 = 0;
		int32_t hitFX5 = 0;
		int32_t hitFX6 = 0;
		int32_t hitFX7 = 0;
		int32_t hitFX8 = 0;
		int32_t hitFX9 = 0;
		int32_t hitFX10 = 0;
	};

	class ItemBaseAttackTable : public GameDataTable
	{
	public:
		 static constexpr int64_t INDEX = 26;

	public:
		void LoadFromFile(const std::filesystem::path& path);

		auto Find(int32_t index) const -> const ItemBaseAttack*;
		auto Get() const -> const std::vector<ItemBaseAttack>&;

	private:
		std::vector<ItemBaseAttack> _vector;
		std::unordered_map<int32_t, const ItemBaseAttack*> _umap;
	};
}
