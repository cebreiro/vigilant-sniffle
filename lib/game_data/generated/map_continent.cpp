/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "map_continent.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<MapContinentTable> registry;

	MapContinent::MapContinent(StreamReader& reader)
	{
		index = reader.ReadInt32();
		continentId = reader.ReadInt32();
		zoneId = reader.ReadInt32();
		zoneX1 = reader.ReadInt32();
		zoneY1 = reader.ReadInt32();
		zoneX2 = reader.ReadInt32();
		zoneY2 = reader.ReadInt32();
		zoneNameX1 = reader.ReadInt32();
		zoneNameY1 = reader.ReadInt32();
		link01X1 = reader.ReadInt32();
		link01Y1 = reader.ReadInt32();
		link02X1 = reader.ReadInt32();
		link02Y1 = reader.ReadInt32();
		link03X1 = reader.ReadInt32();
		link03Y1 = reader.ReadInt32();
		link04X1 = reader.ReadInt32();
		link04Y1 = reader.ReadInt32();
		link05X1 = reader.ReadInt32();
		link05Y1 = reader.ReadInt32();
		link06X1 = reader.ReadInt32();
		link06Y1 = reader.ReadInt32();
		dungeon01String = reader.ReadInt32();
		dungeon01X1 = reader.ReadInt32();
		dungeon01Y1 = reader.ReadInt32();
		dungeon02String = reader.ReadInt32();
		dungeon02X1 = reader.ReadInt32();
		dungeon02Y1 = reader.ReadInt32();
		dungeon03String = reader.ReadInt32();
		dungeon03X1 = reader.ReadInt32();
		dungeon03Y1 = reader.ReadInt32();
		dungeon04String = reader.ReadInt32();
		dungeon04X1 = reader.ReadInt32();
		dungeon04Y1 = reader.ReadInt32();
		dungeon05String = reader.ReadInt32();
		dungeon05X1 = reader.ReadInt32();
		dungeon05Y1 = reader.ReadInt32();
	}

	void MapContinentTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "MAP_CONTINENT.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const MapContinent& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto MapContinentTable::Find(int32_t index) const -> const MapContinent*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto MapContinentTable::Get() const -> const std::vector<MapContinent>&
	{
		return _vector;
	}
}
