/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "ability_part2.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<AbilityPart2Table> registry;

	AbilityPart2::AbilityPart2(StreamReader& reader)
	{
		index = reader.ReadInt32();
		calc1Type = reader.ReadInt32();
		calc1Unit = reader.ReadInt32();
		factor101 = reader.ReadFloat32();
		factor102 = reader.ReadFloat32();
		factor103 = reader.ReadFloat32();
		factor104 = reader.ReadFloat32();
		factor105 = reader.ReadFloat32();
		factor106 = reader.ReadFloat32();
		factor107 = reader.ReadFloat32();
		factor108 = reader.ReadFloat32();
		factor109 = reader.ReadFloat32();
		factor110 = reader.ReadFloat32();
		factor111 = reader.ReadFloat32();
		factor112 = reader.ReadFloat32();
		factor113 = reader.ReadFloat32();
		factor114 = reader.ReadFloat32();
		factor115 = reader.ReadFloat32();
		b11 = reader.ReadFloat32();
		b12 = reader.ReadFloat32();
		b13 = reader.ReadFloat32();
		b14 = reader.ReadFloat32();
		b15 = reader.ReadFloat32();
		b16 = reader.ReadFloat32();
		b17 = reader.ReadFloat32();
		b18 = reader.ReadFloat32();
		b19 = reader.ReadFloat32();
		b110 = reader.ReadFloat32();
		b111 = reader.ReadFloat32();
		b112 = reader.ReadFloat32();
		b113 = reader.ReadFloat32();
		b114 = reader.ReadFloat32();
		b115 = reader.ReadFloat32();
		calc2Type = reader.ReadInt32();
		calc2Unit = reader.ReadInt32();
		factor201 = reader.ReadFloat32();
		factor202 = reader.ReadFloat32();
		factor203 = reader.ReadFloat32();
		factor204 = reader.ReadFloat32();
		factor205 = reader.ReadFloat32();
		factor206 = reader.ReadFloat32();
		factor207 = reader.ReadFloat32();
		factor208 = reader.ReadFloat32();
		factor209 = reader.ReadFloat32();
		factor210 = reader.ReadFloat32();
		factor211 = reader.ReadFloat32();
		factor212 = reader.ReadFloat32();
		factor213 = reader.ReadFloat32();
		factor214 = reader.ReadFloat32();
		factor215 = reader.ReadFloat32();
		b21 = reader.ReadFloat32();
		b22 = reader.ReadFloat32();
		b23 = reader.ReadFloat32();
		b24 = reader.ReadFloat32();
		b25 = reader.ReadFloat32();
		b26 = reader.ReadFloat32();
		b27 = reader.ReadFloat32();
		b28 = reader.ReadFloat32();
		b29 = reader.ReadFloat32();
		b210 = reader.ReadFloat32();
		b211 = reader.ReadFloat32();
		b212 = reader.ReadFloat32();
		b213 = reader.ReadFloat32();
		b214 = reader.ReadFloat32();
		b215 = reader.ReadFloat32();
		calc3Type = reader.ReadInt32();
		calc3Unit = reader.ReadInt32();
		factor301 = reader.ReadFloat32();
		factor302 = reader.ReadFloat32();
		factor303 = reader.ReadFloat32();
		factor304 = reader.ReadFloat32();
		factor305 = reader.ReadFloat32();
		factor306 = reader.ReadFloat32();
		factor307 = reader.ReadFloat32();
		factor308 = reader.ReadFloat32();
		factor309 = reader.ReadFloat32();
		factor310 = reader.ReadFloat32();
		factor311 = reader.ReadFloat32();
		factor312 = reader.ReadFloat32();
		factor313 = reader.ReadFloat32();
		factor314 = reader.ReadFloat32();
		factor315 = reader.ReadFloat32();
		b31 = reader.ReadFloat32();
		b32 = reader.ReadFloat32();
		b33 = reader.ReadFloat32();
		b34 = reader.ReadFloat32();
		b35 = reader.ReadFloat32();
		b36 = reader.ReadFloat32();
		b37 = reader.ReadFloat32();
		b38 = reader.ReadFloat32();
		b39 = reader.ReadFloat32();
		b310 = reader.ReadFloat32();
		b311 = reader.ReadFloat32();
		b312 = reader.ReadFloat32();
		b313 = reader.ReadFloat32();
		b314 = reader.ReadFloat32();
		b315 = reader.ReadFloat32();
	}

	void AbilityPart2Table::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "ABILITY_PART2.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const AbilityPart2& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto AbilityPart2Table::Find(int32_t index) const -> const AbilityPart2*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto AbilityPart2Table::Get() const -> const std::vector<AbilityPart2>&
	{
		return _vector;
	}
}
