/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "conversion.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<ConversionTable> registry;

	Conversion::Conversion(StreamReader& reader)
	{
		index = reader.ReadInt32();
		strPhysHit = reader.ReadInt32();
		strHp = reader.ReadInt32();
		dexHitAccuracy = reader.ReadInt32();
		dexEvade = reader.ReadInt32();
		dexPhysHit = reader.ReadInt32();
		constHp = reader.ReadInt32();
		constPhysDefense = reader.ReadInt32();
		intSp = reader.ReadInt32();
		intAbilityAttack = reader.ReadInt32();
		intAbilityAccuracy = reader.ReadInt32();
		willPhysDefense = reader.ReadInt32();
		willSp = reader.ReadInt32();
		willAbilityAttack = reader.ReadInt32();
		willAbilityAccuracy = reader.ReadInt32();
		elemAttack = reader.ReadInt32();
		elemDefense = reader.ReadInt32();
		rarityProbability = reader.ReadFloat32();
		rarityMoney = reader.ReadInt32();
		rarityLifetime = reader.ReadInt32();
		constHPRecoveryRate = reader.ReadFloat32();
		willSPRecoveryRate = reader.ReadFloat32();
		strNPDecreaseRate = reader.ReadFloat32();
		dexSpeed = reader.ReadInt32();
		dexAttackSpeed = reader.ReadInt32();
		dexAttackDelay = reader.ReadInt32();
		levelDiffExpRate = reader.ReadFloat32();
		levelFactorForHospital = reader.ReadFloat32();
		intCombination = reader.ReadInt32();
		rarityExp = reader.ReadInt32();
		levelExpPenalty = reader.ReadFloat32();
		willResist = reader.ReadFloat32();
		levelExpDistribution = reader.ReadInt32();
		levelAbnormalityProb = reader.ReadInt32();
	}

	void ConversionTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "CONVERSION.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const Conversion& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto ConversionTable::Find(int32_t index) const -> const Conversion*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto ConversionTable::Get() const -> const std::vector<Conversion>&
	{
		return _vector;
	}
}
