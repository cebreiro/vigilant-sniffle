/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#pragma once
#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem>
#include "lib/game_data/game_data_table.h"

namespace cebreiro { class StreamReader; }

namespace cebreiro::gamedata
{
	struct MonsterBase
	{
		MonsterBase() = default;
		explicit MonsterBase(StreamReader& reader);

		int32_t index = 0;
		std::string name;
		int32_t level = 0;
		int32_t exp = 0;
		int32_t partyExp = 0;
		int32_t race = 0;
		int32_t hp = 0;
		int32_t patkMin = 0;
		int32_t patkMax = 0;
		int32_t phrat = 0;
		int32_t perat = 0;
		int32_t pdefSlash = 0;
		int32_t pdefBash = 0;
		int32_t pdefPierce = 0;
		int32_t matk = 0;
		int32_t mres = 0;
		int32_t elemF = 0;
		int32_t elemW = 0;
		int32_t elemL = 0;
		int32_t speed = 0;
		int32_t speedChase = 0;
		int32_t debuffRes = 0;
		int32_t lifetime = 0;
		int32_t activationStartTime = 0;
		int32_t activationEndTime = 0;
		int32_t material = 0;
	};

	class MonsterBaseTable : public GameDataTable
	{
	public:
		 static constexpr int64_t INDEX = 56;

	public:
		void LoadFromFile(const std::filesystem::path& path);

		auto Find(int32_t index) const -> const MonsterBase*;
		auto Get() const -> const std::vector<MonsterBase>&;

	private:
		std::vector<MonsterBase> _vector;
		std::unordered_map<int32_t, const MonsterBase*> _umap;
	};
}
