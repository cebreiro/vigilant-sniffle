/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "item_combination.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<ItemCombinationTable> registry;

	ItemCombination::ItemCombination(StreamReader& reader)
	{
		index = reader.ReadInt32();
		type = reader.ReadInt32();
		result = reader.ReadInt32();
		job = reader.ReadInt32();
		level = reader.ReadInt32();
		ability = reader.ReadInt32();
		whenFails = reader.ReadInt32();
		failExp = reader.ReadInt32();
		orgMod1 = reader.ReadInt32();
		orgMod2 = reader.ReadInt32();
		req1 = reader.ReadInt32();
		req2 = reader.ReadInt32();
		req3 = reader.ReadInt32();
		req4 = reader.ReadInt32();
		req5 = reader.ReadInt32();
		req6 = reader.ReadInt32();
		req7 = reader.ReadInt32();
		req8 = reader.ReadInt32();
		req9 = reader.ReadInt32();
		req1num = reader.ReadInt32();
		req2num = reader.ReadInt32();
		req3num = reader.ReadInt32();
		req4num = reader.ReadInt32();
		req5num = reader.ReadInt32();
		req6num = reader.ReadInt32();
		req7num = reader.ReadInt32();
		req8num = reader.ReadInt32();
		req9num = reader.ReadInt32();
	}

	void ItemCombinationTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "ITEM_COMBINATION.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const ItemCombination& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto ItemCombinationTable::Find(int32_t index) const -> const ItemCombination*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto ItemCombinationTable::Get() const -> const std::vector<ItemCombination>&
	{
		return _vector;
	}
}
