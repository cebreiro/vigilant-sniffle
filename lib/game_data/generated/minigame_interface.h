/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#pragma once
#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem>
#include "lib/game_data/game_data_table.h"

namespace cebreiro { class StreamReader; }

namespace cebreiro::gamedata
{
	struct MinigameInterface
	{
		MinigameInterface() = default;
		explicit MinigameInterface(StreamReader& reader);

		int32_t index = 0;
		std::string gameName;
		int32_t minNumTeams = 0;
		int32_t maxNumTeams = 0;
		int32_t minTeamSize = 0;
		int32_t maxTeamSize = 0;
		int32_t maxNumObs = 0;
		int32_t teamMinPlayer = 0;
		int32_t equalPlayer = 0;
		int32_t maxBet = 0;
		int32_t param1Name = 0;
		int32_t param1Min = 0;
		int32_t param1Max = 0;
		int32_t param2Name = 0;
		int32_t param2Min = 0;
		int32_t param2Max = 0;
		int32_t param3Name = 0;
		int32_t param3Min = 0;
		int32_t param3Max = 0;
	};

	class MinigameInterfaceTable : public GameDataTable
	{
	public:
		 static constexpr int64_t INDEX = 44;

	public:
		void LoadFromFile(const std::filesystem::path& path);

		auto Find(int32_t index) const -> const MinigameInterface*;
		auto Get() const -> const std::vector<MinigameInterface>&;

	private:
		std::vector<MinigameInterface> _vector;
		std::unordered_map<int32_t, const MinigameInterface*> _umap;
	};
}
