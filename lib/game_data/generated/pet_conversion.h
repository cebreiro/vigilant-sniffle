/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#pragma once
#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem>
#include "lib/game_data/game_data_table.h"

namespace cebreiro { class StreamReader; }

namespace cebreiro::gamedata
{
	struct PetConversion
	{
		PetConversion() = default;
		explicit PetConversion(StreamReader& reader);

		int32_t index = 0;
		int32_t maxSt = 0;
		int32_t exp = 0;
		int32_t stInc = 0;
		float npDec = 0.f;
		int32_t expDecNp0 = 0;
		float freqIdleMotion = 0.f;
		int32_t moveSpeed = 0;
		float caressCount = 0.f;
		int32_t caressExp = 0;
		float annoyCount = 0.f;
		int32_t annoyExpInc = 0;
		int32_t annoyExpDec = 0;
		int32_t abFetchScanRange = 0;
		float abFetchScanFreq = 0.f;
		int32_t abFetchNoItem = 0;
		int32_t abAttackAttackPower = 0;
		int32_t abAttackScanRange = 0;
		float abAttackScanFreq = 0.f;
	};

	class PetConversionTable : public GameDataTable
	{
	public:
		 static constexpr int64_t INDEX = 64;

	public:
		void LoadFromFile(const std::filesystem::path& path);

		auto Find(int32_t index) const -> const PetConversion*;
		auto Get() const -> const std::vector<PetConversion>&;

	private:
		std::vector<PetConversion> _vector;
		std::unordered_map<int32_t, const PetConversion*> _umap;
	};
}
