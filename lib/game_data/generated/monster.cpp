/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "monster.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<MonsterTable> registry;

	Monster::Monster(StreamReader& reader)
	{
		index = reader.ReadInt32();
		monstername = reader.ReadString(reader.ReadUInt16());
		modelid = reader.ReadInt32();
		race = reader.ReadInt32();
		exp = reader.ReadInt32();
		level = reader.ReadInt32();
		str = reader.ReadInt32();
		dex = reader.ReadInt32();
		con = reader.ReadInt32();
		_int = reader.ReadInt32();
		wil = reader.ReadInt32();
		reserved1 = reader.ReadInt32();
		reserved2 = reader.ReadInt32();
		reserved3 = reader.ReadInt32();
		lifetime = reader.ReadInt32();
		damageMotionMinHp = reader.ReadFloat32();
		resist = reader.ReadInt32();
		abilityDamageB = reader.ReadInt32();
		abilityDamageC = reader.ReadInt32();
		abilityDamageD = reader.ReadInt32();
		randomAttackFactor = reader.ReadFloat32();
		death1delay = reader.ReadInt32();
		maxrarity = reader.ReadInt32();
		itemgenTimes = reader.ReadInt32();
		tresure1 = reader.ReadInt32();
		tresure2 = reader.ReadInt32();
		tresure3 = reader.ReadInt32();
		tresure4 = reader.ReadInt32();
		tresure5 = reader.ReadInt32();
		tresure6 = reader.ReadInt32();
		tresure7 = reader.ReadInt32();
		tresure8 = reader.ReadInt32();
		moneyRarityMod = reader.ReadInt32();
		moneyMinRarity = reader.ReadInt32();
		moneyFactor = reader.ReadFloat32();
		aiType = reader.ReadInt32();
		followship = reader.ReadInt32();
		generateType = reader.ReadInt32();
		rageIncRate = reader.ReadInt32();
		rageDecRate = reader.ReadInt32();
		rageAttackFactor = reader.ReadFloat32();
		ragespeed = reader.ReadInt32();
		basicspeed = reader.ReadInt32();
		sight = reader.ReadInt32();
		chase = reader.ReadInt32();
		canGoOut = reader.ReadInt32();
		domain = reader.ReadInt32();
		monsterarea = reader.ReadInt32();
		characteristic = reader.ReadInt32();
		activationStartTime = reader.ReadInt32();
		activationEndTime = reader.ReadInt32();
		childId = reader.ReadInt32();
		childSummonDelay = reader.ReadInt32();
		childNum = reader.ReadInt32();
		childSummonFrame = reader.ReadInt32();
		searchtime = reader.ReadInt32();
		move1 = reader.ReadInt32();
		move1range1 = reader.ReadInt32();
		move1range2 = reader.ReadInt32();
		move1delay1 = reader.ReadInt32();
		move1delay2 = reader.ReadInt32();
	}

	void MonsterTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "MONSTER.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const Monster& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto MonsterTable::Find(int32_t index) const -> const Monster*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto MonsterTable::Get() const -> const std::vector<Monster>&
	{
		return _vector;
	}
}
