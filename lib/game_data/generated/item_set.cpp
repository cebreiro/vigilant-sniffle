/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "item_set.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<ItemSetTable> registry;

	ItemSet::ItemSet(StreamReader& reader)
	{
		index = reader.ReadInt32();
		item01 = reader.ReadInt32();
		item01Mod = reader.ReadInt32();
		item02 = reader.ReadInt32();
		item02Mod = reader.ReadInt32();
		item03 = reader.ReadInt32();
		item03Mod = reader.ReadInt32();
		item04 = reader.ReadInt32();
		item04Mod = reader.ReadInt32();
		item05 = reader.ReadInt32();
		item05Mod = reader.ReadInt32();
		item06 = reader.ReadInt32();
		item06Mod = reader.ReadInt32();
		item07 = reader.ReadInt32();
		item07Mod = reader.ReadInt32();
		item08 = reader.ReadInt32();
		item08Mod = reader.ReadInt32();
		item09 = reader.ReadInt32();
		item09Mod = reader.ReadInt32();
		item10 = reader.ReadInt32();
		item10Mod = reader.ReadInt32();
		item11 = reader.ReadInt32();
		item11Mod = reader.ReadInt32();
		item12 = reader.ReadInt32();
		item12Mod = reader.ReadInt32();
		item13 = reader.ReadInt32();
		item13Mod = reader.ReadInt32();
		item14 = reader.ReadInt32();
		item14Mod = reader.ReadInt32();
		item15 = reader.ReadInt32();
		item15Mod = reader.ReadInt32();
		item16 = reader.ReadInt32();
		item16Mod = reader.ReadInt32();
		item17 = reader.ReadInt32();
		item17Mod = reader.ReadInt32();
		item18 = reader.ReadInt32();
		item18Mod = reader.ReadInt32();
		item19 = reader.ReadInt32();
		item19Mod = reader.ReadInt32();
		item20 = reader.ReadInt32();
		item20Mod = reader.ReadInt32();
		item21 = reader.ReadInt32();
		item21Mod = reader.ReadInt32();
		item22 = reader.ReadInt32();
		item22Mod = reader.ReadInt32();
		item23 = reader.ReadInt32();
		item23Mod = reader.ReadInt32();
		item24 = reader.ReadInt32();
		item24Mod = reader.ReadInt32();
		item25 = reader.ReadInt32();
		item25Mod = reader.ReadInt32();
		item26 = reader.ReadInt32();
		item26Mod = reader.ReadInt32();
		item27 = reader.ReadInt32();
		item27Mod = reader.ReadInt32();
		item28 = reader.ReadInt32();
		item28Mod = reader.ReadInt32();
		item29 = reader.ReadInt32();
		item29Mod = reader.ReadInt32();
		item30 = reader.ReadInt32();
		item30Mod = reader.ReadInt32();
		item31 = reader.ReadInt32();
		item31Mod = reader.ReadInt32();
		item32 = reader.ReadInt32();
		item32Mod = reader.ReadInt32();
		item33 = reader.ReadInt32();
		item33Mod = reader.ReadInt32();
		item34 = reader.ReadInt32();
		item34Mod = reader.ReadInt32();
		item35 = reader.ReadInt32();
		item35Mod = reader.ReadInt32();
		item36 = reader.ReadInt32();
		item36Mod = reader.ReadInt32();
		item37 = reader.ReadInt32();
		item37Mod = reader.ReadInt32();
		item38 = reader.ReadInt32();
		item38Mod = reader.ReadInt32();
		item39 = reader.ReadInt32();
		item39Mod = reader.ReadInt32();
		item40 = reader.ReadInt32();
		item40Mod = reader.ReadInt32();
		item41 = reader.ReadInt32();
		item41Mod = reader.ReadInt32();
		item42 = reader.ReadInt32();
		item42Mod = reader.ReadInt32();
		item43 = reader.ReadInt32();
		item43Mod = reader.ReadInt32();
		item44 = reader.ReadInt32();
		item44Mod = reader.ReadInt32();
		item45 = reader.ReadInt32();
		item45Mod = reader.ReadInt32();
		item46 = reader.ReadInt32();
		item46Mod = reader.ReadInt32();
		item47 = reader.ReadInt32();
		item47Mod = reader.ReadInt32();
		item48 = reader.ReadInt32();
		item48Mod = reader.ReadInt32();
		item49 = reader.ReadInt32();
		item49Mod = reader.ReadInt32();
		item50 = reader.ReadInt32();
		item50Mod = reader.ReadInt32();
	}

	void ItemSetTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "ITEM_SET.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const ItemSet& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto ItemSetTable::Find(int32_t index) const -> const ItemSet*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto ItemSetTable::Get() const -> const std::vector<ItemSet>&
	{
		return _vector;
	}
}
