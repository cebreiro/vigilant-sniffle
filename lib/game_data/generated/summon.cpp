/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "summon.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<SummonTable> registry;

	Summon::Summon(StreamReader& reader)
	{
		index = reader.ReadInt32();
		monstername = reader.ReadString(reader.ReadUInt16());
		modelid = reader.ReadInt32();
		level = reader.ReadInt32();
		hp = reader.ReadInt32();
		patk = reader.ReadInt32();
		phrat = reader.ReadInt32();
		perat = reader.ReadInt32();
		pdef = reader.ReadInt32();
		resDamage = reader.ReadInt32();
		death1delay = reader.ReadInt32();
		lifeTime = reader.ReadInt32();
		aiType = reader.ReadInt32();
		basicspeed = reader.ReadInt32();
		sight = reader.ReadInt32();
		chase = reader.ReadInt32();
		size = reader.ReadInt32();
		characteristic = reader.ReadInt32();
		searchtime = reader.ReadInt32();
		moveType = reader.ReadInt32();
		moveRangeMin = reader.ReadInt32();
		moveRangeMax = reader.ReadInt32();
		moveDelayMin = reader.ReadInt32();
		moveDelayMax = reader.ReadInt32();
		attack1dmgrfactor = reader.ReadFloat32();
		attack1type = reader.ReadInt32();
		attack1percent = reader.ReadFloat32();
		attack1range = reader.ReadInt32();
		attack1dmgfactor = reader.ReadFloat32();
		attack1effectrange = reader.ReadInt32();
		attack1additional = reader.ReadInt32();
		attack1reserved1 = reader.ReadInt32();
		attack1reserved2 = reader.ReadInt32();
		attack1reserved3 = reader.ReadInt32();
		attack1fx = reader.ReadInt32();
		attack1atkanipartid = reader.ReadInt32();
		attack1atkprm = reader.ReadInt32();
		attack1delay = reader.ReadInt32();
		attack1beatkani = reader.ReadInt32();
		attack1FxType = reader.ReadInt32();
		attack1FxId = reader.ReadInt32();
		attack1Sound = reader.ReadInt32();
		attack2type = reader.ReadInt32();
		attack2percent = reader.ReadFloat32();
		attack2range = reader.ReadInt32();
		attack2dmgfactor = reader.ReadFloat32();
		attack2effectrange = reader.ReadInt32();
		attack2additional = reader.ReadInt32();
		attack2reserved1 = reader.ReadInt32();
		attack2reserved2 = reader.ReadInt32();
		attack2reserved3 = reader.ReadInt32();
		attack2fx = reader.ReadInt32();
		attack2atkanipartid = reader.ReadInt32();
		attack2atkprm = reader.ReadInt32();
		attack2delay = reader.ReadInt32();
		attack2beatkani = reader.ReadInt32();
		attack2FxType = reader.ReadInt32();
		attack2FxId = reader.ReadInt32();
		attack2Sound = reader.ReadInt32();
		attack3type = reader.ReadInt32();
		attack3percent = reader.ReadFloat32();
		attack3range = reader.ReadInt32();
		attack3dmgfactor = reader.ReadFloat32();
		attack3effectrange = reader.ReadInt32();
		attack3additional = reader.ReadInt32();
		attack3reserved1 = reader.ReadInt32();
		attack3reserved2 = reader.ReadInt32();
		attack3reserved3 = reader.ReadInt32();
		attack3fx = reader.ReadInt32();
		attack3atkanipartid = reader.ReadInt32();
		attack3atkprm = reader.ReadInt32();
		attack3delay = reader.ReadInt32();
		attack3beatkani = reader.ReadInt32();
		attack3FxType = reader.ReadInt32();
		attack3FxId = reader.ReadInt32();
		attack3Sound = reader.ReadInt32();
		attack4type = reader.ReadInt32();
		attack4percent = reader.ReadFloat32();
		attack4range = reader.ReadInt32();
		attack4dmgfactor = reader.ReadFloat32();
		attack4effectrange = reader.ReadInt32();
		attack4additional = reader.ReadInt32();
		attack4reserved1 = reader.ReadInt32();
		attack4reserved2 = reader.ReadInt32();
		attack4reserved3 = reader.ReadInt32();
		attack4fx = reader.ReadInt32();
		attack4atkanipartid = reader.ReadInt32();
		attack4atkprm = reader.ReadInt32();
		attack4delay = reader.ReadInt32();
		attack4beatkani = reader.ReadInt32();
		attack4FxType = reader.ReadInt32();
		attack4FxId = reader.ReadInt32();
		attack4Sound = reader.ReadInt32();
	}

	void SummonTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "SUMMON.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const Summon& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto SummonTable::Find(int32_t index) const -> const Summon*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto SummonTable::Get() const -> const std::vector<Summon>&
	{
		return _vector;
	}
}
