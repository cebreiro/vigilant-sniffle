/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "item_modifier.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<ItemModifierTable> registry;

	ItemModifier::ItemModifier(StreamReader& reader)
	{
		index = reader.ReadInt32();
		effect = reader.ReadString(reader.ReadUInt16());
		name = reader.ReadString(reader.ReadUInt16());
		generate = reader.ReadInt32();
		group = reader.ReadInt32();
		level = reader.ReadInt32();
		sortRank = reader.ReadInt32();
		rarity = reader.ReadInt32();
		addedTo = reader.ReadInt32();
		noModification = reader.ReadInt32();
		mod1 = reader.ReadInt32();
		mod1Min = reader.ReadFloat32();
		mod1Max = reader.ReadFloat32();
		mod1Type = reader.ReadInt32();
		mod1ExprType = reader.ReadInt32();
		mod1RoundingDigit = reader.ReadInt32();
		mod2 = reader.ReadInt32();
		mod2Min = reader.ReadFloat32();
		mod2Max = reader.ReadFloat32();
		mod2Type = reader.ReadInt32();
		mod2ExprType = reader.ReadInt32();
		mod2RoundingDigit = reader.ReadInt32();
		mod3 = reader.ReadInt32();
		mod3Min = reader.ReadFloat32();
		mod3Max = reader.ReadFloat32();
		mod3Type = reader.ReadInt32();
		mod3ExprType = reader.ReadInt32();
		mod3RoundingDigit = reader.ReadInt32();
		noConstraint = reader.ReadInt32();
		constr1 = reader.ReadInt32();
		constr1Value = reader.ReadInt32();
		constr2 = reader.ReadInt32();
		constr2Value = reader.ReadInt32();
		constr3 = reader.ReadInt32();
		constr3Value = reader.ReadInt32();
		constr4 = reader.ReadInt32();
		constr4Value = reader.ReadInt32();
	}

	void ItemModifierTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "ITEM_MODIFIER.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const ItemModifier& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto ItemModifierTable::Find(int32_t index) const -> const ItemModifier*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto ItemModifierTable::Get() const -> const std::vector<ItemModifier>&
	{
		return _vector;
	}
}
