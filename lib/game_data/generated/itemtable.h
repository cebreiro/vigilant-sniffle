/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#pragma once
#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>
#include <filesystem>
#include "lib/game_data/game_data_table.h"

namespace cebreiro { class StreamReader; }

namespace cebreiro::gamedata
{
	struct Itemtable
	{
		Itemtable() = default;
		explicit Itemtable(StreamReader& reader);

		int32_t index = 0;
		std::string name;
		int32_t generate = 0;
		int32_t category = 0;
		int32_t type = 0;
		int32_t job = 0;
		std::string explanation;
		int32_t detailCate1 = 0;
		int32_t detailCate2 = 0;
		int32_t modifiable = 0;
		int32_t invenWidth = 0;
		int32_t invenHeight = 0;
		int32_t modelid = 0;
		int32_t quickslot = 0;
		int32_t materialAmbient = 0;
		int32_t materialDiffuse = 0;
		int32_t limitArticle1 = 0;
		int32_t limitArticle2 = 0;
		int32_t limitArticle3 = 0;
		int32_t limitArticle4 = 0;
		int32_t limitValue1 = 0;
		int32_t limitValue2 = 0;
		int32_t limitValue3 = 0;
		int32_t limitValue4 = 0;
		int32_t distanceDefense = 0;
		int32_t accuracyEvasion = 0;
		int32_t durabilityMaxcount = 0;
		int32_t maxInvenCount = 0;
		int32_t minimumdamage = 0;
		int32_t maximumdamage = 0;
		int32_t twohand = 0;
		int32_t limitTime = 0;
		int32_t effect1 = 0;
		int32_t effect2 = 0;
		int32_t effect3 = 0;
		int32_t effect4 = 0;
		float effectvalue1 = 0.f;
		float effectvalue2 = 0.f;
		float effectvalue3 = 0.f;
		float effectvalue4 = 0.f;
		int32_t weaponSound = 0;
		int32_t weaponFXH = 0;
		int32_t weaponFXM = 0;
		int32_t weaponFXL = 0;
		int32_t effectID1 = 0;
		int32_t effectID2 = 0;
		int32_t effectID3 = 0;
		int32_t effectID4 = 0;
		int32_t rarity = 0;
		int32_t sound1 = 0;
		int32_t petEP = 0;
		int32_t petNP = 0;
		int32_t petEXP = 0;
	};

	class ItemtableTable : public GameDataTable
	{
	public:
		 static constexpr int64_t INDEX = 25;

	public:
		void LoadFromFile(const std::filesystem::path& path);

		auto Find(int32_t index) const -> const Itemtable*;
		auto Get() const -> const std::vector<Itemtable>&;

	private:
		std::vector<Itemtable> _vector;
		std::unordered_map<int32_t, const Itemtable*> _umap;
	};
}
