/**********************************************************
         AUTO GENERATED FILE BY sox_code_generator
                   DO NOT EDIT THIS FILE
**********************************************************/
#include "weapon_motion_type.h"

#include "lib/common/stream/stream_reader.h"
#include "lib/game_base/data/sox/sox_file.h"
#include "lib/game_data/game_data_registry.h"

namespace cebreiro::gamedata
{
	[[maybe_unused]]
	static GameDataRegistry<WeaponMotionTypeTable> registry;

	WeaponMotionType::WeaponMotionType(StreamReader& reader)
	{
		index = reader.ReadInt32();
		_default = reader.ReadInt32();
		defaultSpeed = reader.ReadFloat32();
		walk = reader.ReadInt32();
		walkSpeed = reader.ReadFloat32();
		run = reader.ReadInt32();
		runSpeed = reader.ReadFloat32();
		idle = reader.ReadInt32();
		idleSpeed = reader.ReadFloat32();
		disArm = reader.ReadInt32();
		disArmSpeed = reader.ReadFloat32();
		reArm = reader.ReadInt32();
		reArmSpeed = reader.ReadFloat32();
		reLoad = reader.ReadInt32();
		reLoadSpeed = reader.ReadFloat32();
		maxCombo = reader.ReadInt32();
		attackMotion1 = reader.ReadInt32();
		attackMotion1Speed = reader.ReadFloat32();
		attackMotion2 = reader.ReadInt32();
		attackMotion2Speed = reader.ReadFloat32();
		attackMotion3 = reader.ReadInt32();
		attackMotion3Speed = reader.ReadFloat32();
		attackMotion4 = reader.ReadInt32();
		attackMotion4Speed = reader.ReadFloat32();
		attackMotion5 = reader.ReadInt32();
		attackMotion5Speed = reader.ReadFloat32();
		attackMotion6 = reader.ReadInt32();
		attackMotion6Speed = reader.ReadFloat32();
		attackMotion7 = reader.ReadInt32();
		attackMotion7Speed = reader.ReadFloat32();
		attackMotion8 = reader.ReadInt32();
		attackMotion8Speed = reader.ReadFloat32();
		attackMotion9 = reader.ReadInt32();
		attackMotion9Speed = reader.ReadFloat32();
		attackMotion10 = reader.ReadInt32();
		attackMotion10Speed = reader.ReadFloat32();
		feedbackMotion1 = reader.ReadInt32();
		feedbackMotion1Speed = reader.ReadFloat32();
		feedbackMotion2 = reader.ReadInt32();
		feedbackMotion2Speed = reader.ReadFloat32();
		feedbackMotion3 = reader.ReadInt32();
		feedbackMotion3Speed = reader.ReadFloat32();
		feedbackMotion4 = reader.ReadInt32();
		feedbackMotion4Speed = reader.ReadFloat32();
		feedbackMotion5 = reader.ReadInt32();
		feedbackMotion5Speed = reader.ReadFloat32();
		feedbackMotion6 = reader.ReadInt32();
		feedbackMotion6Speed = reader.ReadFloat32();
		feedbackMotion7 = reader.ReadInt32();
		feedbackMotion7Speed = reader.ReadFloat32();
		feedbackMotion8 = reader.ReadInt32();
		feedbackMotion8Speed = reader.ReadFloat32();
		feedbackMotion9 = reader.ReadInt32();
		feedbackMotion9Speed = reader.ReadFloat32();
		feedbackMotion10 = reader.ReadInt32();
		feedbackMotion10Speed = reader.ReadFloat32();
	}

	void WeaponMotionTypeTable::LoadFromFile(const std::filesystem::path& path)
	{
		gamebase::SoxFile fileData(path / "weapon_motion_type.sox");
		StreamReader reader(fileData.gameData.data(), fileData.gameData.size());

		_vector.reserve(fileData.rowCount);
		for (int32_t i = 0; i < fileData.rowCount; ++i)
		{
			_vector.emplace_back(reader);
		}

		for (const WeaponMotionType& data : _vector)
		{
			_umap[data.index] = &data;
		}
	}

	auto WeaponMotionTypeTable::Find(int32_t index) const -> const WeaponMotionType*
	{
		auto iter = _umap.find(index);
		return iter != _umap.end() ? iter->second : nullptr;
	}

	auto WeaponMotionTypeTable::Get() const -> const std::vector<WeaponMotionType>&
	{
		return _vector;
	}
}
